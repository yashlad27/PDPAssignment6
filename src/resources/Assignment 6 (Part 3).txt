3/28/25, 9:04 PM

Assignment 6 (Part 3)

Assignment 6 (Part 3)
Due 9 Apr by 20:59
Points 0
Available after 28 Mar at 21:00
Example starter code, Things you can do with Swing: code (https://northeastern.instructure.com/courses/206084/files/33808670/download)

Overview
In this iteration of this project, you will build a view for the calendar application, featuring a graphical user interface. This will allow a user to interactively create,edit, and view
events in a digital calendar. The result of this iteration will be a calendar that a user can interact with in a text-based interface, a GUI, as well as use scripting in headless
mode.

1 Graphical View
1.1 General Constraints
1. You must use the Java Swing library to build the user interface of this application. To this end, you can use the examples discussed in the view module, provided with the
starter code, and any class in the official Java Swing library. You are not allowed to use any component or class that is not part of the JDK. Note you should use the code in
the starter code as an example of features you can use. You are not required or limited to use those features. Further, the provided starter code is meant to illustrate things
you can do with Swing. It must not be treated as an example of how you should design your code. In fact the provided started code does not align to any design
principle. Hence, it is your responsibility to adapt it to fit the needs and constraints of this assignment.
2. The GUI should, at a minimum, support a month view of a calendar. A month view shows all the days of the current month. A user can navigate to another month in the
future or in the past. You are free to add more views (e.g., weekly view, days view, etc.).
3. The GUI must expose features listed and described in the next section.
4. The GUI should have support for multiple calendars in any timezone chosen by the user.
5. You are expected to handle invalid user input via the GUI gracefully. Graceful error handling means that you must detect the cause of the error and inform the user with a
useful message that does not leak implementation details but lets the user know how to fix the error.
6. The layout of the UI should be reasonable. Things should be in proper proportion, and laid out in a reasonable manner. Buttons/text fields/labels that are oversized, or
haphazardly arranged, even if functional, will result in a point deduction.
7. Each user interaction or user input must be reasonably user-friendly (e.g. making the user type something when a less error-prone method is possible is not good UI
design). We do not expect snazzy, sophisticated user-friendly programs. Our standard is: can a user unfamiliar with your code and technical documentation operate the
program correctly without reading your code and technical documentation?
8. Keep in mind that this is a graphical user interface for your program. It is not a graphical way to use the same interaction as the text mode. The expectations of the user,
and what the user is expected to enter, are not the same as when specifying script commands!

1.2 Expected Feature Set
The following features must be usable via your graphical user interface.
1. A user should be able to create a new calendar for a particular timezone.
2. A user should be able to select a calendar and create, edit, view events for the selected calendar. The same constraint applies as before: no conflicts are allowed.
3. A user should know which calendar they are on when interacting with the GUI. The way you distinguish a calendar is upto you. One example would be to color code the
different calendars.
4. A user should not be forced to create a new calendar. Instead, the GUI should allow a user to work with a default calendar in the user's current timezone based on their
system setting.
5. A user should be able to select a specific day of a month and view all events scheduled on that day in the calendar's timezone.
6. A user should be able to create a new event on a selected day of a month. The event can be a single or recurring event. For recurring events, a user should be able to
specify the weekdays on which the event will repeat and the frequency in terms of number of occurrences or until an end date.
7. A user should be able to select a specific day of a month and edit events.
The user should be able to identify a single event and edit it. The user should also be able to identify multiple events with the same name within a user-specified period of time
and edit them together.
1. A user should be able to export a selected calendar to a CSV file supported by Google Calendar.
2. A user should be able to import events into a calendar from a CSV file. The file format must be the same as supported by Google calendar.

1.3 Design Considerations
Carefully design the interaction between a view and a controller, and formalize the interactions with view and controller interfaces. You may design a single controller that
manages the program in interactive, headless and GUI modes. Different controllers for different views are also possible if the views are very different from each other.
However, be mindful of the MVC principles and separation between the model, view and controller. When designing, always ask: "can I change one part with no/minimal
changes to the others?"

1.4 Testing
https://northeastern.instructure.com/courses/206084/assignments/2644493

1/3

3/28/25, 9:04 PM

Assignment 6 (Part 3)

Think carefully about which parts of the program require testing. For example, you are not expected to test whether a particular button click produces the desired result. In that
sense, testing the actual GUI is optional. However, you should test whether the controller does what it is supposed to in reaction to this happening.

2 Program Execution
2.1 Creating a JAR File
To create a JAR file, do the following:
Go to File -> Project Structure -> Project Settings -> Artifacts
Click on the plus sign
Choose JAR -> From Modules with dependencies. You should now see the module in your project that you are working on (may be different than what is shown in the
image below)

Select the main class of your program (where you defined the main(String[] args) method)
If you see a checkbox labelled "Build on make", check it.
Hit ok
You should now see something like

If now you see a checkbox labelled ''Build on make", check it now.
Make your project (the button to the left of the run configurations dropdown, with the ones and zeros and a down-arrow on it). Your .jar file should now be in /out/artifacts/.
Verify that your jar file works . To do this, copy the jar file to another folder. Now open a command-prompt/terminal and navigate to that folder. Now type java -jar
NameOfJARFile.jar and press ENTER. The program should behave accordingly. If instead you get errors review the above procedure to create the JAR file correctly. You
can also run the jar file by double-clicking on it.

2.2 Command-line arguments
Your program (from IntelliJ or the JAR file) should accept command-line inputs. Three command-line inputs are valid:
java -jar Program.jar --headless path-of-script-file

: when invoked in this manner the program should open the script file, execute it and then shut down.

https://northeastern.instructure.com/courses/206084/assignments/2644493

2/3

3/28/25, 9:04 PM

Assignment 6 (Part 3)

java -jar Program.jar --interactive

: when invoked in this manner the program should open in an interactive text mode, allowing the user to type the script and execute it

one line at a time. This is how the program worked in the last assignment.
java -jar Program.jar

: when invoked in this manner the program should open the graphical user interface. This is what will happen if you simply double-click on the jar

file.
Any other command-line arguments are invalid: in these cases the program should display an error message suitably and quit.

3 What to submit
1. All your code in src/.
2. All your code in test/.
3. Submit a res/ folder with the following:
1. An executable JAR file. We should be able to run your program from this jar file interactive, headless, and gui mode.
2. A CSV file that can be exported to Google Calendar.
3. A CSV file that can be imported to a calendar of the GUI you have made.
4. A screenshot of events in the CSV file in Google Calendar.
5. A screenshot of events imported from the CSV file in your GUI.
4. A README with instructions to run your program.
5. A USEME file that contains a bullet-point list of how to use your GUI to use each operation supported by your program. Screenshots would be helpful, but not necessary.

Grading Criteria
1. The completeness, layout, and behavior of your GUI.
2. Whether your design aligns with MVC and SOLID principles.
3. Whether you have addressed issues in the previous version.
4. Well-structured and clean code with relevant documentation.
5. Completeness and correctness of your tests as evidenced by running them and mutation testing.
6. Proper access modifiers.
7. Expected formatting style.

https://northeastern.instructure.com/courses/206084/assignments/2644493

3/3

